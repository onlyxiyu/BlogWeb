"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_ThreatMapLeaflet_js";
exports.ids = ["components_ThreatMapLeaflet_js"];
exports.modules = {

/***/ "./components/ThreatMapLeaflet.js":
/*!****************************************!*\
  !*** ./components/ThreatMapLeaflet.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ThreatMapLeaflet)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! leaflet */ \"leaflet\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"./node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction ThreatMapLeaflet({ attacks, serverLocation }) {\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const attackLinesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const [mapReady, setMapReady] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const serverMarkerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // 初始化地图\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // 修复 Leaflet 图标问题\n        delete (leaflet__WEBPACK_IMPORTED_MODULE_2___default().Icon).Default.prototype._getIconUrl;\n        leaflet__WEBPACK_IMPORTED_MODULE_2___default().Icon.Default.mergeOptions({\n            iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png\",\n            iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png\",\n            shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png\"\n        });\n        // 创建地图实例\n        if (!mapInstanceRef.current && mapRef.current) {\n            // 使用深色主题地图\n            const map = leaflet__WEBPACK_IMPORTED_MODULE_2___default().map(mapRef.current, {\n                center: [\n                    30,\n                    10\n                ],\n                zoom: 2,\n                minZoom: 2,\n                maxZoom: 10,\n                zoomControl: true,\n                attributionControl: true\n            });\n            // 添加深色主题瓦片图层\n            leaflet__WEBPACK_IMPORTED_MODULE_2___default().tileLayer(\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\", {\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n                subdomains: \"abcd\",\n                maxZoom: 20\n            }).addTo(map);\n            // 添加自定义 CSS 样式\n            const style = document.createElement(\"style\");\n            style.textContent = `\r\n        .pulse {\r\n          width: 20px;\r\n          height: 20px;\r\n          border-radius: 50%;\r\n          background: rgba(0, 120, 255, 0.6);\r\n          box-shadow: 0 0 0 rgba(0, 120, 255, 0.6);\r\n          animation: pulse 2s infinite;\r\n        }\r\n        \r\n        @keyframes pulse {\r\n          0% {\r\n            box-shadow: 0 0 0 0 rgba(0, 120, 255, 0.6);\r\n          }\r\n          70% {\r\n            box-shadow: 0 0 0 20px rgba(0, 120, 255, 0);\r\n          }\r\n          100% {\r\n            box-shadow: 0 0 0 0 rgba(0, 120, 255, 0);\r\n          }\r\n        }\r\n        \r\n        .attack-marker {\r\n          width: 10px;\r\n          height: 10px;\r\n          border-radius: 50%;\r\n          background: red;\r\n          opacity: 0.8;\r\n        }\r\n        \r\n        .attack-line {\r\n          stroke-dasharray: 5, 5;\r\n          animation: dash 30s linear infinite;\r\n          opacity: 0.7;\r\n        }\r\n        \r\n        @keyframes dash {\r\n          to {\r\n            stroke-dashoffset: 1000;\r\n          }\r\n        }\r\n      `;\n            document.head.appendChild(style);\n            mapInstanceRef.current = map;\n            setMapReady(true);\n        }\n        return ()=>{\n            if (mapInstanceRef.current) {\n                mapInstanceRef.current.remove();\n                mapInstanceRef.current = null;\n            }\n            document.querySelectorAll(\"style\").forEach((el)=>{\n                if (el.textContent.includes(\".pulse\")) {\n                    el.remove();\n                }\n            });\n        };\n    }, []);\n    // 更新服务器位置标记\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapReady || !mapInstanceRef.current || !serverLocation) return;\n        const map = mapInstanceRef.current;\n        // 移除旧的服务器标记\n        if (serverMarkerRef.current && map.hasLayer(serverMarkerRef.current)) {\n            map.removeLayer(serverMarkerRef.current);\n        }\n        // 添加目标服务器标记\n        const targetIcon = leaflet__WEBPACK_IMPORTED_MODULE_2___default().divIcon({\n            className: \"target-marker\",\n            html: '<div class=\"pulse\"></div>',\n            iconSize: [\n                20,\n                20\n            ],\n            iconAnchor: [\n                10,\n                10\n            ]\n        });\n        // 添加服务器位置\n        const targetMarker = leaflet__WEBPACK_IMPORTED_MODULE_2___default().marker([\n            serverLocation.coords[0],\n            serverLocation.coords[1]\n        ], {\n            icon: targetIcon,\n            zIndexOffset: 1000 // 确保目标标记始终在顶层\n        }).addTo(map);\n        targetMarker.bindPopup(`<strong>您的服务器</strong><br>${serverLocation.city}, ${serverLocation.country}`);\n        serverMarkerRef.current = targetMarker;\n        // 将地图中心移动到服务器位置\n        map.setView([\n            serverLocation.coords[0],\n            serverLocation.coords[1]\n        ], 3);\n    }, [\n        mapReady,\n        serverLocation\n    ]);\n    // 处理攻击数据更新\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapReady || !mapInstanceRef.current) return;\n        const map = mapInstanceRef.current;\n        // 清除旧的攻击线条\n        attackLinesRef.current.forEach((line)=>{\n            if (map.hasLayer(line)) {\n                map.removeLayer(line);\n            }\n        });\n        attackLinesRef.current = [];\n        // 添加新的攻击线条和标记\n        attacks.forEach((attack)=>{\n            const { source, target, type, id } = attack;\n            // 如果源坐标无效，跳过\n            if (!source.coords || source.coords.length !== 2) return;\n            // 获取攻击类型对应的颜色\n            const getAttackColor = (attackType)=>{\n                switch(attackType){\n                    case \"DDoS\":\n                        return \"#ff4d4d\";\n                    case \"SQL注入\":\n                        return \"#ffcc00\";\n                    case \"XSS\":\n                        return \"#00ccff\";\n                    case \"暴力破解\":\n                        return \"#ff9900\";\n                    case \"恶意扫描\":\n                        return \"#9966ff\";\n                    case \"CSRF\":\n                        return \"#ff66cc\";\n                    case \"钓鱼攻击\":\n                        return \"#6666ff\";\n                    case \"恶意软件\":\n                        return \"#66ff66\";\n                    default:\n                        return \"#ffffff\";\n                }\n            };\n            const color = getAttackColor(type);\n            // 创建或更新源标记\n            if (!markersRef.current[id]) {\n                const attackIcon = leaflet__WEBPACK_IMPORTED_MODULE_2___default().divIcon({\n                    className: \"attack-marker\",\n                    html: `<div style=\"background-color: ${color}; width: 8px; height: 8px; border-radius: 50%;\"></div>`,\n                    iconSize: [\n                        8,\n                        8\n                    ],\n                    iconAnchor: [\n                        4,\n                        4\n                    ]\n                });\n                const marker = leaflet__WEBPACK_IMPORTED_MODULE_2___default().marker([\n                    source.coords[0],\n                    source.coords[1]\n                ], {\n                    icon: attackIcon\n                }).addTo(map);\n                marker.bindPopup(`\r\n          <strong>${type}</strong><br>\r\n          来源: ${source.city || \"未知\"}, ${source.country || \"未知\"}<br>\r\n          IP: ${source.ip}<br>\r\n          时间: ${new Date(attack.timestamp).toLocaleTimeString()}\r\n        `);\n                markersRef.current[id] = marker;\n                // 5分钟后自动移除标记\n                setTimeout(()=>{\n                    if (map.hasLayer(marker)) {\n                        map.removeLayer(marker);\n                    }\n                    delete markersRef.current[id];\n                }, 5 * 60 * 1000);\n            }\n            // 创建攻击线条\n            const attackLine = leaflet__WEBPACK_IMPORTED_MODULE_2___default().polyline([\n                [\n                    source.coords[0],\n                    source.coords[1]\n                ],\n                [\n                    target.coords[0],\n                    target.coords[1]\n                ] // 使用服务器真实坐标\n            ], {\n                color: color,\n                weight: 2,\n                opacity: 0.7,\n                dashArray: \"5, 5\",\n                className: \"attack-line\"\n            }).addTo(map);\n            attackLinesRef.current.push(attackLine);\n            // 30秒后自动移除线条\n            setTimeout(()=>{\n                if (map.hasLayer(attackLine)) {\n                    map.removeLayer(attackLine);\n                }\n                attackLinesRef.current = attackLinesRef.current.filter((line)=>line !== attackLine);\n            }, 30 * 1000);\n        });\n    }, [\n        attacks,\n        mapReady,\n        serverLocation\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mapRef,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        }\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\xiyu\\\\Desktop\\\\bokweb\\\\components\\\\ThreatMapLeaflet.js\",\n        lineNumber: 231,\n        columnNumber: 10\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/ThreatMapLeaflet.js\n");

/***/ })

};
;